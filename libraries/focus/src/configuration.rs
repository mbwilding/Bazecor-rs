use crate::enums::{LedMode, WirelessPowerMode};
use serde::{Deserialize, Serialize};
use std::time::Duration;

#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
pub struct Configuration {
    pub keymap_custom: String,
    pub keymap_default: String,
    pub keymap_only_custom: bool,
    pub settings_default_layer: u8,
    pub settings_version: String,
    // pub eeprom_contents: String,
    pub superkeys_map: String,
    pub superkeys_wait_for: Duration,
    pub superkeys_timeout: Duration,
    pub superkeys_repeat: Duration,
    pub superkeys_hold_start: Duration,
    pub superkeys_overlap: u8,
    pub led_mode: LedMode,
    pub led_brightness: u8,
    pub led_brightness_underglow: u8,
    pub led_brightness_wireless: u8,
    pub led_brightness_underglow_wireless: u8,
    pub led_fade: u16,
    pub led_theme: String,
    pub palette: String,
    pub color_map: String,
    pub led_idle_true_sleep: bool,
    pub led_idle_true_sleep_time: Duration,
    pub led_idle_time_limit: Duration,
    pub led_idle_wireless: bool,
    pub hardware_version: String,
    pub qukeys_hold_timeout: Duration,
    pub qukeys_overlap_threshold: Duration,
    pub macros_map: String,
    pub mouse_speed: u8,
    pub mouse_delay: Duration,
    pub mouse_acceleration_speed: u8,
    pub mouse_acceleration_delay: Duration,
    pub mouse_wheel_speed: u8,
    pub mouse_wheel_delay: Duration,
    pub mouse_speed_limit: u8,
    pub wireless_battery_saving_mode: bool,
    pub wireless_rf_power_level: WirelessPowerMode,
    pub wireless_rf_channel_hop: bool,
}
